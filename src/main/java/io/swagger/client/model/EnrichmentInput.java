/*
 * LE Indexer API
 * &copy; 2018 Health Language
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * EnrichmentInput
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-01T09:30:57.014Z")
public class EnrichmentInput {
  @SerializedName("annotationTypes")
  private List<String> annotationTypes = new ArrayList<String>();

  @SerializedName("parameters")
  private Map<String, List<String>> parameters = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("useCaseId")
  private String useCaseId = null;

  public EnrichmentInput annotationTypes(List<String> annotationTypes) {
    this.annotationTypes = annotationTypes;
    return this;
  }

  public EnrichmentInput addAnnotationTypesItem(String annotationTypesItem) {
    this.annotationTypes.add(annotationTypesItem);
    return this;
  }

   /**
   * list of annotation types to return in the response
   * @return annotationTypes
  **/
  @ApiModelProperty(required = true, value = "list of annotation types to return in the response")
  public List<String> getAnnotationTypes() {
    return annotationTypes;
  }

  public void setAnnotationTypes(List<String> annotationTypes) {
    this.annotationTypes = annotationTypes;
  }

  public EnrichmentInput parameters(Map<String, List<String>> parameters) {
    this.parameters = parameters;
    return this;
  }

  public EnrichmentInput putParametersItem(String key, List<String> parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String, List<String>>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

   /**
   * map of parameters for the use case
   * @return parameters
  **/
  @ApiModelProperty(value = "map of parameters for the use case")
  public Map<String, List<String>> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, List<String>> parameters) {
    this.parameters = parameters;
  }

  public EnrichmentInput text(String text) {
    this.text = text;
    return this;
  }

   /**
   * text to enrich, must be JSON encoded
   * @return text
  **/
  @ApiModelProperty(required = true, value = "text to enrich, must be JSON encoded")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public EnrichmentInput useCaseId(String useCaseId) {
    this.useCaseId = useCaseId;
    return this;
  }

   /**
   * the use case for enrichment
   * @return useCaseId
  **/
  @ApiModelProperty(required = true, value = "the use case for enrichment")
  public String getUseCaseId() {
    return useCaseId;
  }

  public void setUseCaseId(String useCaseId) {
    this.useCaseId = useCaseId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrichmentInput enrichmentInput = (EnrichmentInput) o;
    return Objects.equals(this.annotationTypes, enrichmentInput.annotationTypes) &&
        Objects.equals(this.parameters, enrichmentInput.parameters) &&
        Objects.equals(this.text, enrichmentInput.text) &&
        Objects.equals(this.useCaseId, enrichmentInput.useCaseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationTypes, parameters, text, useCaseId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrichmentInput {\n");
    
    sb.append("    annotationTypes: ").append(toIndentedString(annotationTypes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    useCaseId: ").append(toIndentedString(useCaseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

