/*
 * LE Indexer API
 * &copy; 2018 Health Language
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AnnotatorMetadata;
import io.swagger.client.model.DynamicEnrichRequest;
import io.swagger.client.model.EnrichmentRequest;
import io.swagger.client.model.EnrichmentResponse;
import io.swagger.client.model.UseCase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentEnrichmentApi {
    private ApiClient apiClient;

    public ContentEnrichmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentEnrichmentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dynamicEnrichUsingPOST
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dynamicEnrichUsingPOSTCall(DynamicEnrichRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/enrich/dynamic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dynamicEnrichUsingPOSTValidateBeforeCall(DynamicEnrichRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling dynamicEnrichUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = dynamicEnrichUsingPOSTCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs content enrichment for full text.
     * Enriches full text content with code annotations.  This endpoint provides flexible enrichment as the annotation steps are defined as part of the request.
     * @param request request (required)
     * @return EnrichmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrichmentResponse dynamicEnrichUsingPOST(DynamicEnrichRequest request) throws ApiException {
        ApiResponse<EnrichmentResponse> resp = dynamicEnrichUsingPOSTWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Runs content enrichment for full text.
     * Enriches full text content with code annotations.  This endpoint provides flexible enrichment as the annotation steps are defined as part of the request.
     * @param request request (required)
     * @return ApiResponse&lt;EnrichmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrichmentResponse> dynamicEnrichUsingPOSTWithHttpInfo(DynamicEnrichRequest request) throws ApiException {
        com.squareup.okhttp.Call call = dynamicEnrichUsingPOSTValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Runs content enrichment for full text. (asynchronously)
     * Enriches full text content with code annotations.  This endpoint provides flexible enrichment as the annotation steps are defined as part of the request.
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dynamicEnrichUsingPOSTAsync(DynamicEnrichRequest request, final ApiCallback<EnrichmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dynamicEnrichUsingPOSTValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enrichUsingPOST
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enrichUsingPOSTCall(EnrichmentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/enrich";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        
        //add your api key here 
        //localVarHeaderParams.put("Authorization", "Bearer your-api-key");
        
        if (!localVarHeaderParams.containsKey("Authorization")) {
            throw new RuntimeException("please add Authorization header to Http Header");
        }

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enrichUsingPOSTValidateBeforeCall(EnrichmentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling enrichUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = enrichUsingPOSTCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Runs content enrichment for full text.
     * Enriches full text content with code annotations.  This endpoint supports enrichment via pre-defined use cases.  The supported parameters vary by use case - use the /usecases endpoint to see the available options. &lt;br&gt; &lt;br&gt; Example input: &lt;br&gt; {&lt;br&gt;\&quot;enrichmentInput\&quot;:[{&lt;br&gt;\&quot;text\&quot;:\&quot;She is known to have nonischemic cardiomyopathy.\&quot;,&lt;br&gt;\&quot;useCaseId\&quot;:\&quot;snomed_indexer\&quot;,&lt;br&gt;\&quot;parameters\&quot;:{\&quot;codeGroups\&quot;:[\&quot;cd2177f2-d1d3-4e4f-9a60-7b88cc45c99c\&quot;,\&quot;d332aa64-2c79-45bc-baa1-d5aa4abdb2c9\&quot;]}&lt;br&gt;}]&lt;br&gt;}
     * @param request request (required)
     * @return EnrichmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EnrichmentResponse enrichUsingPOST(EnrichmentRequest request) throws ApiException {
        ApiResponse<EnrichmentResponse> resp = enrichUsingPOSTWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Runs content enrichment for full text.
     * Enriches full text content with code annotations.  This endpoint supports enrichment via pre-defined use cases.  The supported parameters vary by use case - use the /usecases endpoint to see the available options. &lt;br&gt; &lt;br&gt; Example input: &lt;br&gt; {&lt;br&gt;\&quot;enrichmentInput\&quot;:[{&lt;br&gt;\&quot;text\&quot;:\&quot;She is known to have nonischemic cardiomyopathy.\&quot;,&lt;br&gt;\&quot;useCaseId\&quot;:\&quot;snomed_indexer\&quot;,&lt;br&gt;\&quot;parameters\&quot;:{\&quot;codeGroups\&quot;:[\&quot;cd2177f2-d1d3-4e4f-9a60-7b88cc45c99c\&quot;,\&quot;d332aa64-2c79-45bc-baa1-d5aa4abdb2c9\&quot;]}&lt;br&gt;}]&lt;br&gt;}
     * @param request request (required)
     * @return ApiResponse&lt;EnrichmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EnrichmentResponse> enrichUsingPOSTWithHttpInfo(EnrichmentRequest request) throws ApiException {
        com.squareup.okhttp.Call call = enrichUsingPOSTValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Runs content enrichment for full text. (asynchronously)
     * Enriches full text content with code annotations.  This endpoint supports enrichment via pre-defined use cases.  The supported parameters vary by use case - use the /usecases endpoint to see the available options. &lt;br&gt; &lt;br&gt; Example input: &lt;br&gt; {&lt;br&gt;\&quot;enrichmentInput\&quot;:[{&lt;br&gt;\&quot;text\&quot;:\&quot;She is known to have nonischemic cardiomyopathy.\&quot;,&lt;br&gt;\&quot;useCaseId\&quot;:\&quot;snomed_indexer\&quot;,&lt;br&gt;\&quot;parameters\&quot;:{\&quot;codeGroups\&quot;:[\&quot;cd2177f2-d1d3-4e4f-9a60-7b88cc45c99c\&quot;,\&quot;d332aa64-2c79-45bc-baa1-d5aa4abdb2c9\&quot;]}&lt;br&gt;}]&lt;br&gt;}
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enrichUsingPOSTAsync(EnrichmentRequest request, final ApiCallback<EnrichmentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enrichUsingPOSTValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAnnotatorMetadataUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnnotatorMetadataUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/annotators";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAnnotatorMetadataUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAnnotatorMetadataUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annotator metadata.
     * Returns metadata about all known annotators.  The annotator IDs can be used in dynamic enrich requests.
     * @return List&lt;AnnotatorMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AnnotatorMetadata> getAnnotatorMetadataUsingGET() throws ApiException {
        ApiResponse<List<AnnotatorMetadata>> resp = getAnnotatorMetadataUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Annotator metadata.
     * Returns metadata about all known annotators.  The annotator IDs can be used in dynamic enrich requests.
     * @return ApiResponse&lt;List&lt;AnnotatorMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AnnotatorMetadata>> getAnnotatorMetadataUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAnnotatorMetadataUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<AnnotatorMetadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annotator metadata. (asynchronously)
     * Returns metadata about all known annotators.  The annotator IDs can be used in dynamic enrich requests.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnnotatorMetadataUsingGETAsync(final ApiCallback<List<AnnotatorMetadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnnotatorMetadataUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AnnotatorMetadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUseCasesUsingGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUseCasesUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/usecases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUseCasesUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUseCasesUsingGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of the available enrichment use cases.
     * Gets all available use cases.  Each use case in the response includes details about the parameters that each use case supports.  They also include sample requests.
     * @return List&lt;UseCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UseCase> getUseCasesUsingGET() throws ApiException {
        ApiResponse<List<UseCase>> resp = getUseCasesUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns a list of the available enrichment use cases.
     * Gets all available use cases.  Each use case in the response includes details about the parameters that each use case supports.  They also include sample requests.
     * @return ApiResponse&lt;List&lt;UseCase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UseCase>> getUseCasesUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUseCasesUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<UseCase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of the available enrichment use cases. (asynchronously)
     * Gets all available use cases.  Each use case in the response includes details about the parameters that each use case supports.  They also include sample requests.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUseCasesUsingGETAsync(final ApiCallback<List<UseCase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUseCasesUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UseCase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
